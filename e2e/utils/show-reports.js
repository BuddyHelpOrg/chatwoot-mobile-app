/**
 * Test Report Summary Generator
 * 
 * Reads the JSON reports generated by E2E tests and displays a summary
 */

const fs = require('fs');
const path = require('path');

// ANSI colors for better output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

// Get all report files
const getReportFiles = () => {
  const reportsDir = path.join(__dirname, '../reports');
  
  if (!fs.existsSync(reportsDir)) {
    console.log(`${colors.yellow}No reports directory found at ${reportsDir}${colors.reset}`);
    return [];
  }
  
  return fs.readdirSync(reportsDir)
    .filter(file => file.endsWith('.json'))
    .map(file => path.join(reportsDir, file));
};

// Parse a report file
const parseReport = (filePath) => {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(content);
  } catch (error) {
    console.log(`${colors.red}Error parsing report ${filePath}: ${error.message}${colors.reset}`);
    return null;
  }
};

// Format date nicely
const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleString();
};

// Print a nicely formatted summary of a report
const printReportSummary = (report, index) => {
  const statusColor = 
    report.status === 'passed' ? colors.green :
    report.status === 'warning' ? colors.yellow :
    colors.red;
  
  console.log(`\n${colors.bright}Report #${index + 1}:${colors.reset} ${report.testName}`);
  console.log(`${colors.dim}Time: ${formatDate(report.timestamp)}${colors.reset}`);
  console.log(`Status: ${statusColor}${report.status.toUpperCase()}${colors.reset}`);
  
  // Print error if there is one
  if (report.details && report.details.error) {
    console.log(`${colors.red}Error: ${report.details.error}${colors.reset}`);
  }
  
  // Print steps summary if available
  if (report.details && report.details.steps && report.details.steps.length > 0) {
    console.log(`\n${colors.bright}Test Steps:${colors.reset}`);
    
    let passedSteps = 0;
    let failedSteps = 0;
    let warningSteps = 0;
    
    report.details.steps.forEach(step => {
      const stepColor = 
        step.status === 'passed' ? colors.green :
        step.status === 'warning' ? colors.yellow :
        colors.red;
      
      if (step.status === 'passed') passedSteps++;
      else if (step.status === 'failed') failedSteps++;
      else if (step.status === 'warning') warningSteps++;
      
      // Only print failed or warning steps for cleaner output
      if (step.status !== 'passed') {
        console.log(`  ${stepColor}${step.name}${colors.reset}: ${step.status.toUpperCase()}`);
        if (step.error) console.log(`    ${colors.red}${step.error}${colors.reset}`);
        if (step.message) console.log(`    ${colors.yellow}${step.message}${colors.reset}`);
      }
    });
    
    console.log(`\n${colors.cyan}Summary: ${colors.green}${passedSteps} passed${colors.reset}, ${colors.red}${failedSteps} failed${colors.reset}, ${colors.yellow}${warningSteps} warnings${colors.reset}`);
  }
  
  console.log(`${colors.dim}${'-'.repeat(60)}${colors.reset}`);
};

// Main function
const main = () => {
  console.log(`${colors.bright}${colors.cyan}Appium Test Reports Summary${colors.reset}\n`);
  
  const reportFiles = getReportFiles();
  
  if (reportFiles.length === 0) {
    console.log(`${colors.yellow}No test reports found.${colors.reset}`);
    console.log(`Run tests first with: ${colors.cyan}pnpm test:e2e:ios${colors.reset} or ${colors.cyan}pnpm test:e2e:android${colors.reset}`);
    return;
  }
  
  // Sort reports by date (newest first)
  const reports = reportFiles
    .map(file => parseReport(file))
    .filter(report => report !== null)
    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
  
  console.log(`Found ${colors.bright}${reports.length}${colors.reset} test reports\n`);
  
  // Generate statistics
  const stats = {
    total: reports.length,
    passed: reports.filter(r => r.status === 'passed').length,
    failed: reports.filter(r => r.status === 'failed').length,
    warning: reports.filter(r => r.status === 'warning').length
  };
  
  console.log(`${colors.bright}Overall Statistics:${colors.reset}`);
  console.log(`Total Tests: ${colors.bright}${stats.total}${colors.reset}`);
  console.log(`Passed: ${colors.green}${stats.passed}${colors.reset}`);
  console.log(`Failed: ${colors.red}${stats.failed}${colors.reset}`);
  console.log(`Warnings: ${colors.yellow}${stats.warning}${colors.reset}`);
  
  // Print the most recent reports (up to 5)
  console.log(`\n${colors.bright}${colors.cyan}Most Recent Test Reports:${colors.reset}`);
  
  const recentReports = reports.slice(0, 5);
  recentReports.forEach(printReportSummary);
  
  // If there are more reports, show a message
  if (reports.length > 5) {
    console.log(`\n${colors.dim}Showing 5 of ${reports.length} reports. All reports are in ${path.join(__dirname, '../reports')}${colors.reset}`);
  }
};

// Run the script
main(); 